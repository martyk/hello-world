Example of how I locally edited README.md and then put it back on GitHub

$# sync with GitHub
$ git checkout master
$ git pull git@github.com:martyk/hello-world.git master
$# do the edity bits
$ git status
$# add the edited files
$ git add README.md
$ git commit
$# esc :wq to exit vi
$ git push origin master

If it was just an update of an existing file could I leave out the 
"git add" command?  Looks like.  "add" seems to either stage an existing file for commit, or adds that to the main index prior to commit.

I should be able to just to a "commit" to put this updated txt file on GitHub.

Nope.  Even modified files must be added to the commit list.  Status will show what has been changed, then you can "add" or do a "commit -a" to automatically stage the changed files.

"a" puts vi into Insert mode?  esc : to command mode?

Can I change editor to pico (or something) for commit message?

1/17/17 17:00

Seems git pull git@github.com:martyk/hello-world.git master fails with 
Permission denied (publickey).  Looks like the old Octo key was deleted.

Went to Personal Settings > SSH and GPG keys page on GitHub.  Clicked on New SSH Key and copied ~/.ssh/id_rsa.pub into the text box and hit Create Key with name Octo Public Key.  

Now the pull/commit works.

1/26/17 13:20

Did a 

$ git config --global core.editor "open -W -n" 

to change commit commenting editor to TextEdit 
Tried Hybrid1:Applications:TextEdit.app, and various URLs, and 
they did NOT work.  -W made it wait until I closed ALL TextEdit windows.
Hopefully -e will just do the one.

How about /Applications/TextEdit.app/Contents/MacOS/TextEdit?

Still has the "you have to close every instance of TextEdit to 
continue problem"

Gave up and went back to default "vi I guess" editor by issuing a 
$ git config --global --unset-all core.editor 
command

Odd.  I had a typo in the commit message so I thought a 

$ git commit --amend 

would fix it right up.  Editing the message, made it correct, but when I did the 

$  git push origin master
To git@github.com:martyk/hello-world.git
 ! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to 'git@github.com:martyk/hello-world.git'
To prevent you from losing history, non-fast-forward updates were rejected
Merge the remote changes (e.g. 'git pull') before pushing again.  See the
'Note about fast-forwards' section of 'git push --help' for details.

I got the above error message.  I did a pull and then the push worked.  Hrumph.

1/27/17 

Continuing with the git-scm.com/book now on "branching".  
$ git branch testing
$ git checkout testing

Edited this doc and did a commit.
$ git commit -a -m "Updated editing-example.txt with branch commands"

After that, to merge it back, I did 

$ git checkout master # to reset to master, where this file was the old one
$ git merge testing  # to merge changes back into master
$ git branch -d testing # to delete the branch 
$ git push origin master # to push the changes to github

then I added these comments (From "After that" to here) and did a 

$ git commit -a -m "Added post branch comments"

5/19/18 

Installed GitHub Desktop (http://github.com/desktop/desktop) on Octo (which is a zip file that creates an .app file where ever you unzip it it seems).  While it is an interesting GUI to look at git stuff, I was hoping for something more comprehensive.  I mostly hoped it would fix the “using the git command from the shell” issue.  It does not.  Now, if I type a ‘git’ command I get a pop up that says install XCode and/or the command lines tools for XCode.

Bleh.

While I knew my github username and password I was stymied by GHD asking for the password to access id_rsa file for SSH access.  I never thought I had a passphrase on that file.  Seems I did, and still do.  Check the Stats file for the info.

