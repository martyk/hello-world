Example of how I locally edited README.md and then put it back on GitHub

$# sync with GitHub
$ git checkout master
$ git pull git@github.com:martyk/hello-world.git master
$# do the edity bits
$ git status
$# add the edited files
$ git add README.md
$ git commit
$# esc :wq to exit vi
$ git push origin master

If it was just an update of an existing file could I leave out the 
"git add" command?  Looks like.  "add" seems to either stage an existing file for commit, or adds that to the main index prior to commit.

I should be able to just to a "commit" to put this updated txt file on GitHub.

Nope.  Even modified files must be added to the commit list.  Status will show what has been changed, then you can "add" or do a "commit -a" to automatically stage the changed files.

"a" puts vi into Insert mode?  esc : to command mode?

Can I change editor to pico (or something) for commit message?

1/17/17 17:00

Seems git pull git@github.com:martyk/hello-world.git master fails with 
Permission denied (publickey).  Looks like the old Octo key was deleted.

Went to Personal Settings > SSH and GPG keys page on GitHub.  Clicked on New SSH Key and copied ~/.ssh/id_rsa.pub into the text box and hit Create Key with name Octo Public Key.  

Now the pull/commit works.

1/26/17 13:20

Did a 

$ git config --global core.editor "open -W -n" 

to change commit commenting editor to TextEdit 
Tried Hybrid1:Applications:TextEdit.app, and various URLs, and 
they did NOT work.  -W made it wait until I closed ALL TextEdit windows.
Hopefully -e will just do the one.

How about /Applications/TextEdit.app/Contents/MacOS/TextEdit?

Still has the "you have to close every instance of TextEdit to 
continue problem"

Gave up and went back to default "vi I guess" editor by issuing a 
$ git config --global --unset-all core.editor 
command
